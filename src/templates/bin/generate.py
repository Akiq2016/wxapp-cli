#!/usr/bin/python3

import os
import os.path
import sys
import re
from pprint import pprint

# ------------------------------------------- api.ts template
api_file_tmpl = """// Code generated by bin/generate.py. DO NOT EDIT.
export default {{
{modules}
}};
"""

module_tmpl = """
    {name}: {{
{apis}
    }},
"""

api_tmpl = """
        {_key}: {{
            url: '{_module}/{_method}',
            type: 'post',
        }},
"""

# ------------------------------------------- gatewayService.ts template
gateway_file_tmpl = """// Code generated by bin/generate.py. DO NOT EDIT.
import reqConf from '@/config/reqConf';
import t from '@/utils/tools';
import {{ HttpService }} from '@/services/httpService';

// review: if t.deepClone or post or strFormat modified, update bin/generate.py
// tslint:disable-next-line:max-classes-per-file
class GatewayService extends HttpService {{
    constructor() {{
        super('/gateway');
    }}
}}
{services}"""

service_tmpl = """
export class {moduleName}Api extends GatewayService {{
    constructor() {{
        super();
    }}
{methods}
}}
"""

method_tmpl = """
    async {_method}(req: {_reqType}): Promise<{_resType}> {{
        const config = t.deepClone(reqConf.{_module}.{_method});
        return this.post(req, config);
    }}
"""

def capitalizeFirstLetter(text):
  return text[0].upper() + text[1:]

def snake2CamelCase(snake_str):
    components = snake_str.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])

def camel2snakeCase (text):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


# read all the proto file in logicDirList
# generate a api.ts file that include all the api configs.
# generate a gatewayService.ts file that include all the api services.
def genHttpServiceRelated(protoDir, apiOutputPath, gatewayOutputPath):
    pprint('protoDir: %s' % protoDir)
    pprint('apiOutputPath: %s' % apiOutputPath)
    pprint('gatewayOutputPath: %s' % gatewayOutputPath)

    # get logic folder list
    logicDirList = [name for name in os.listdir(protoDir) if name.endswith('logic')]

    # modules for api.ts; services for gatewayService.ts
    modules = []
    services = []

    # generate chunks from each logic proto
    for logicDir in logicDirList:
        filename = '{name}.proto'.format(name=logicDir)
        modulePath = os.path.join(protoDir, logicDir, logicDir, filename)

        with open(modulePath, 'rt') as f:
            item = genChunksFromLogicFile(f)
            modules.append(item['apiData'])
            services.append(item['methodData'])

    # write files
    apiFile = api_file_tmpl.format(modules=''.join(list(filter(None, modules))))
    gatewayFile = gateway_file_tmpl.format(services=''.join(list(filter(None, services))))

    with open(apiOutputPath, 'wt') as f:
        f.write(apiFile)

    with open(gatewayOutputPath, 'wt') as f:
        f.write(gatewayFile)


def genChunksFromLogicFile(fileData):
    keyLineList = [line for line in fileData
        if ~line.find('post: ') or ~line.find('rpc ')]

    moduleDist = {}
    methodDict = {}

    i = 1
    length = len(keyLineList)
    while i < length:
        # rpc line and post line appear in pairs
        rpcLine = keyLineList[i - 1]
        postLine = keyLineList[i]

        # note: a fileData can have several modules, like unionLogic
        _module = postLine[0:postLine.rfind('/')][postLine[0:postLine.rfind('/')].rfind('/') + 1:]

        # get request method name, reqtype, restype in order
        cols = rpcLine.replace('rpc', ' ').replace('(', ' ').replace(')', ' ').replace('returns', ' ').split()
        _method = cols[0]

        # complete the request/response type
        _reqType = cols[1] if ~cols[1].find('.') else _module + '.' + cols[1]
        _resType = cols[2] if ~cols[2].find('.') else _module + '.' + cols[2]

        if _module not in moduleDist:
            moduleDist[_module] = []
            methodDict[_module] = []

        keyValuePair = api_tmpl.format(
            _key=_method,
            _module=_module,
            _method=camel2snakeCase(_method)
        )
        moduleDist[_module].append(keyValuePair)

        method = method_tmpl.format(
            _module=_module,
            _method=_method,
            _reqType=_reqType,
            _resType=_resType
        )
        methodDict[_module].append(method)

        i = i + 2

    apiData = ''.join([
        module_tmpl.format(
            name=module,
            apis=''.join(moduleDist[module])
        ) for module in moduleDist
    ])

    methodData = ''.join([
        service_tmpl.format(
            moduleName=capitalizeFirstLetter(module),
            methods=''.join(methodDict[module])
        ) for module in methodDict
    ])

    return {
        'apiData': apiData,
        'methodData': methodData
    }


def main():
    try:
        # execute code's absolute path. (no filename) sys.path[0]; (has filename) os.path.realpath(__file__))
        rootDir = os.path.dirname(sys.path[0])
        pprint('rootDir: %s' % rootDir)

        protoDir = os.path.expandvars('$GOPATH/src/pinfire.cn/golang/server')
        apiOutputPath = os.path.join(rootDir, 'src/config/api.ts')
        gatewayOutputPath = os.path.join(rootDir, 'src/services/gatewayService.ts')

        genHttpServiceRelated(protoDir, apiOutputPath, gatewayOutputPath)
        return 0
    except BaseException as e:
        pprint('Reason:', e.args)


main()